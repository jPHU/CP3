#include <cstdio>
#include <iostream>
#include <vector>

using namespace std;

int soln[92][8] = {
{0,4,7,5,2,6,1,3},
{0,5,7,2,6,3,1,4},
{0,6,3,5,7,1,4,2},
{0,6,4,7,1,3,5,2},
{1,3,5,7,2,0,6,4},
{1,4,6,0,2,7,5,3},
{1,4,6,3,0,7,5,2},
{1,5,0,6,3,7,2,4},
{1,5,7,2,0,3,6,4},
{1,6,2,5,7,4,0,3},
{1,6,4,7,0,3,5,2},
{1,7,5,0,2,4,6,3},
{2,0,6,4,7,1,3,5},
{2,4,1,7,0,6,3,5},
{2,4,1,7,5,3,6,0},
{2,4,6,0,3,1,7,5},
{2,4,7,3,0,6,1,5},
{2,5,1,4,7,0,6,3},
{2,5,1,6,0,3,7,4},
{2,5,1,6,4,0,7,3},
{2,5,3,0,7,4,6,1},
{2,5,3,1,7,4,6,0},
{2,5,7,0,3,6,4,1},
{2,5,7,0,4,6,1,3},
{2,5,7,1,3,0,6,4},
{2,6,1,7,4,0,3,5},
{2,6,1,7,5,3,0,4},
{2,7,3,6,0,5,1,4},
{3,0,4,7,1,6,2,5},
{3,0,4,7,5,2,6,1},
{3,1,4,7,5,0,2,6},
{3,1,6,2,5,7,0,4},
{3,1,6,2,5,7,4,0},
{3,1,6,4,0,7,5,2},
{3,1,7,4,6,0,2,5},
{3,1,7,5,0,2,4,6},
{3,5,0,4,1,7,2,6},
{3,5,7,1,6,0,2,4},
{3,5,7,2,0,6,4,1},
{3,6,0,7,4,1,5,2},
{3,6,2,7,1,4,0,5},
{3,6,4,1,5,0,2,7},
{3,6,4,2,0,5,7,1},
{3,7,0,2,5,1,6,4},
{3,7,0,4,6,1,5,2},
{3,7,4,2,0,6,1,5},
{4,0,3,5,7,1,6,2},
{4,0,7,3,1,6,2,5},
{4,0,7,5,2,6,1,3},
{4,1,3,5,7,2,0,6},
{4,1,3,6,2,7,5,0},
{4,1,5,0,6,3,7,2},
{4,1,7,0,3,6,2,5},
{4,2,0,5,7,1,3,6},
{4,2,0,6,1,7,5,3},
{4,2,7,3,6,0,5,1},
{4,6,0,2,7,5,3,1},
{4,6,0,3,1,7,5,2},
{4,6,1,3,7,0,2,5},
{4,6,1,5,2,0,3,7},
{4,6,1,5,2,0,7,3},
{4,6,3,0,2,7,5,1},
{4,7,3,0,2,5,1,6},
{4,7,3,0,6,1,5,2},
{5,0,4,1,7,2,6,3},
{5,1,6,0,2,4,7,3},
{5,1,6,0,3,7,4,2},
{5,2,0,6,4,7,1,3},
{5,2,0,7,3,1,6,4},
{5,2,0,7,4,1,3,6},
{5,2,4,6,0,3,1,7},
{5,2,4,7,0,3,1,6},
{5,2,6,1,3,7,0,4},
{5,2,6,1,7,4,0,3},
{5,2,6,3,0,7,1,4},
{5,3,0,4,7,1,6,2},
{5,3,1,7,4,6,0,2},
{5,3,6,0,2,4,1,7},
{5,3,6,0,7,1,4,2},
{5,7,1,3,0,6,4,2},
{6,0,2,7,5,3,1,4},
{6,1,3,0,7,4,2,5},
{6,1,5,2,0,3,7,4},
{6,2,0,5,7,4,1,3},
{6,2,7,1,4,0,5,3},
{6,3,1,4,7,0,2,5},
{6,3,1,7,5,0,2,4},
{6,4,2,0,5,7,1,3},
{7,1,3,0,6,4,2,5},
{7,1,4,2,0,6,3,5},
{7,2,0,5,1,4,6,3},
{7,3,0,2,5,1,6,4}
};

struct Position{
   vector<int> row;
};

int row[8];

// 72 valid positions
vector<Position> valid; 

bool isValid(int r,int c)
{
    for(int i = 0; i < c; ++i)
    {
        if(row[i] == r || abs(row[i] - r) == abs(c - i))
        {
            return false;
        }
        
    }
    return true;
}

void computePositions(int c)
{
    if(c == 8)
    {

       Position p;
       for(int i = 0; i < 8; ++i)
       {
           p.row.push_back(row[i]);
       }
       valid.push_back(p);
           

    
    }
    // Try every row placing
    for(int i = 0; i < 8; ++i)
    {
        if(!isValid(i,c)) continue;
        row[c] = i;
        computePositions(c + 1);
    }
}



int main(void)
{
    /*
    // Pre compute all valid positions (Will be slow)
    computePositions(0);
    for( Position p : valid)
    {
        bool first = true;
        cout << "{";
        for(int x : p.row)
        {
            if(!first){
                cout << ",";
            }
            
            first = false;
            cout << x;
        }
        cout << "}," << endl;
    }
    */

    int testInput[8];
    int cases = 1;
    while(scanf("%d %d %d %d %d %d %d %d", testInput, testInput + 1, testInput + 2, testInput + 3, testInput + 4, testInput + 5, testInput + 6, testInput + 7) == 8)
    {
        int best = 99999;
        for(int i = 0; i < 92; ++i)
        {
            int currentMoves = 0;
            for(int j = 0; j < 8; ++j)
            {
                currentMoves += (soln[i][j] != (testInput[j] - 1)) ? 1: 0;
            }
            if(currentMoves < best)
            {
                best = currentMoves;
            }
        }
        printf("Case %d: %d\n", cases++,best);
    }
    
}

